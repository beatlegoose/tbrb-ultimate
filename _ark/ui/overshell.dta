#define OVERSHELL_LIST_FILE
((file practice/practice_sel_section.milo)
 (focus sel_section.lst))
{new
   MultiSelectListPanel
   overshell_main_panel
   OVERSHELL_LIST_FILE
   (enter
      {sel_section.lst set_data (os_mod os_vis os_spd os_trk " ")}
      {title.lbl set text_token os_dxsettings}
      {$this pause_if_local})
   (exit)
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_spd
            {ui push_screen options_milo_screen}
         )
         (os_mod
            {ui push_screen overshell_modifier_screen}
         )
         (os_vis
            {ui push_screen overshell_visual_screen}
         )
         (os_trk
            {ui push_screen overshell_trk_screen}
         )
      }
   )
   (SCROLL_MSG)
   (BUTTON_DOWN_MSG
      {if {== $action kAction_Cancel}
         {if_else {exists $modifier_exit}
            {ui goto_screen $modifier_exit}
            {ui goto_screen splash_screen}
         }
         #ifndef HX_WII
         INIT_DTA_WRITER
         #endif
         {ui pop_screen}
         {set $modifierpos 0}
      }
      kDataUnhandled
      )}
{new
   UIScreen
   overshell_main_screen
   (panels overshell_main_panel)
   (focus overshell_main_panel)}

;
#define MODIFIER_DATA
((
   {if_else $syncdifspeeds os_syncdifspeeds1 os_syncdifspeeds0}
   #ifndef HX_XBOX
   {if_else $legacybass os_legacybass1 os_legacybass0}
   #endif
   {if_else $whammypb os_whammypb1 os_whammypb0}
   #ifndef HX_WII
   {if_else $padtar os_padtar1 os_padtar0}
   {if_else $paddrum os_paddrum1 os_paddrum0}
   #endif
   " "
   " "
))
{new
   MultiSelectListPanel
   overshell_modifier_panel
   OVERSHELL_LIST_FILE
   (enter
      {$this lst_reset}
      {title.lbl set text_token {localize os_mod}}
      {$this pause_if_local})
   (exit)
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_syncdifspeeds1
            {set $syncdifspeeds {! $syncdifspeeds}}
            {set $modifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_syncdifspeeds0
            {set $syncdifspeeds {! $syncdifspeeds}}
            {set $modifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_legacybass1
            {set $legacybass {! $legacybass}}
            {set $modifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_legacybass0
            {set $legacybass {! $legacybass}}
            {set $modifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_whammypb1
            {set $whammypb {! $whammypb}}
            {set $modifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_whammypb0
            {set $whammypb {! $whammypb}}
            {set $modifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_padtar1
            {set $padtar {! $padtar}}
            {set $paddrum FALSE}
            #ifdef HX_PS3
            {set_elem {find $syscfg joypad instrument_mapping dualshock} 1 kControllerVocals}
            {set_elem {find $syscfg joypad controller_mapping dualshock} 1 joypad}
            #endif
            {set_elem {find $syscfg joypad instrument_mapping analog} 1 kControllerVocals}
            {set_elem {find $syscfg joypad controller_mapping analog} 1 joypad}
            {set $modifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_padtar0
            {set $padtar {! $padtar}}
            {set $paddrum FALSE}
            #ifdef HX_PS3
            {set_elem {find $syscfg joypad instrument_mapping dualshock} 1 kControllerGuitar}
            {set_elem {find $syscfg joypad controller_mapping dualshock} 1 joypad}
            #endif
            {set_elem {find $syscfg joypad instrument_mapping analog} 1 kControllerGuitar}
            {set_elem {find $syscfg joypad controller_mapping analog} 1 joypad}
            {set $modifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_paddrum1
            {set $paddrum {! $paddrum}}
            {set $padtar FALSE}
            #ifdef HX_PS3
            {set_elem {find $syscfg joypad instrument_mapping dualshock} 1 kControllerVocals}
            {set_elem {find $syscfg joypad controller_mapping dualshock} 1 joypad}
            #endif
            {set_elem {find $syscfg joypad instrument_mapping analog} 1 kControllerVocals}
            {set_elem {find $syscfg joypad controller_mapping analog} 1 joypad}
            {set $modifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_paddrum0
            {set $paddrum {! $paddrum}}
            {set $padtar FALSE}
            #ifdef HX_PS3
            {set_elem {find $syscfg joypad instrument_mapping dualshock} 1 kControllerDrum}
            {set_elem {find $syscfg joypad controller_mapping dualshock} 1 joypad}
            #endif
            {set_elem {find $syscfg joypad instrument_mapping analog} 1 kControllerDrum}
            {set_elem {find $syscfg joypad controller_mapping analog} 1 joypad}
            {set $modifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
      }
   )
   (lst_reset
      {sel_section.lst set_data MODIFIER_DATA}
   {if $modifierpos
      {sel_section.lst set_selected $modifierpos}
   })
   (SCROLL_MSG)
   (BUTTON_DOWN_MSG
      {if {== $action kAction_Cancel}
         {ui goto_screen overshell_main_screen}
         {ui pop_screen}
         {set $modifierpos 0}
      }
      kDataUnhandled
      )}
{new
   UIScreen
   overshell_modifier_screen
   (panels overshell_modifier_panel)
   (focus overshell_modifier_panel)}
;

;
#define VIS_MODIFIER_DATA
((
   {if_else $blackbg os_blackbg1 os_blackbg0}
   {if_else $songtitle os_songtitle1 os_songtitle0}
   {if_else $postfx os_postfx1 os_postfx0}
   #ifdef HX_WII
   {if_else $disablegfx os_disablegfx1 os_disablegfx0}
   #endif
   {if_else $forcecnv os_forcecnv1 os_forcecnv0}
   {if_else $forcesnv os_forcesnv1 os_forcesnv0}
   {if_else $forcesav os_forcesav1 os_forcesav0}
   {if_else $forcebnv os_forcebnv1 os_forcebnv0}
   {if_else $forcerpv os_forcerpv1 os_forcerpv0}
))
{new
   MultiSelectListPanel
   overshell_visual_panel
   OVERSHELL_LIST_FILE
   (enter
      {$this lst_reset}
      {title.lbl set text_token {localize os_vis}}
      {$this pause_if_local})
   (exit)
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_songtitle1
            {set $songtitle {! $songtitle}}
            {set $vismodifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_songtitle0
            {set $songtitle {! $songtitle}}
            {set $vismodifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_blackbg1
            {set $blackbg {! $blackbg}}
            {set $vismodifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_blackbg0
            {set $blackbg {! $blackbg}}
            {set $vismodifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_disablegfx1
            {set $disablegfx {! $disablegfx}}
            {set $vismodifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         {rnd toggle_all_postprocs}
         )
         (os_disablegfx0
            {set $disablegfx {! $disablegfx}}
            {set $vismodifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         {rnd toggle_all_postprocs}
       )
       (os_postfx1
            {set $postfx {! $postfx}}
            {set $vismodifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         #ifdef HX_WII
         {pp_override}
         #else
         {rnd toggle_all_postprocs}
         #endif
         )
         (os_postfx0
            {set $postfx {! $postfx}}
            {set $vismodifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         #ifdef HX_WII
         {pp_override}
         #else
         {rnd toggle_all_postprocs}
         #endif
         )
         (os_forcecnv1
            {set $forcecnv {! $forcecnv}}
            {set $forcevenue FALSE}
            {set $vismodifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_forcecnv0
            {set $forcecnv {! $forcecnv}}
            {set $forcesnv FALSE}
            {set $forcesav FALSE}
            {set $forcebnv FALSE}
            {set $forcerpv FALSE}
            {set $forcevenue TRUE}
            {set $forcedvenue cavern}
            {set $vismodifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_forcesnv1
            {set $forcesnv {! $forcesnv}}
            {set $forcevenue FALSE}
            {set $vismodifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_forcesnv0
            {set $forcesnv {! $forcesnv}}
            {set $forcecnv FALSE}
            {set $forcesav FALSE}
            {set $forcebnv FALSE}
            {set $forcerpv FALSE}
            {set $forcevenue TRUE}
            {set $forcedvenue sullivan}
            {set $vismodifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_forcesav1
            {set $forcesav {! $forcesav}}
            {set $forcevenue FALSE}
            {set $vismodifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_forcesav0
            {set $forcesav {! $forcesav}}
            {set $forcecnv FALSE}
            {set $forcesnv FALSE}
            {set $forcebnv FALSE}
            {set $forcerpv FALSE}
            {set $forcevenue TRUE}
            {set $forcedvenue shea}
            {set $vismodifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_forcebnv1
            {set $forcebnv {! $forcebnv}}
            {set $forcevenue FALSE}
            {set $vismodifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_forcebnv0
            {set $forcebnv {! $forcebnv}}
            {set $forcecnv FALSE}
            {set $forcesnv FALSE}
            {set $forcesav FALSE}
            {set $forcerpv FALSE}
            {set $forcevenue TRUE}
            {set $forcedvenue budokan}
            {set $vismodifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_forcerpv1
            {set $forcerpv {! $forcerpv}}
            {set $forcevenue FALSE}
            {set $vismodifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
         (os_forcerpv0
            {set $forcerpv {! $forcerpv}}
            {set $forcecnv FALSE}
            {set $forcesnv FALSE}
            {set $forcesav FALSE}
            {set $forcebnv FALSE}
            {set $forcevenue TRUE}
            {set $forcedvenue rooftop}
            {set $vismodifierpos {sel_section.lst selected_sym}}
            {$this lst_reset}
         )
      }
   )
   (lst_reset
      {sel_section.lst set_data VIS_MODIFIER_DATA}
   {if $vismodifierpos
      {sel_section.lst set_selected $vismodifierpos}
   })
   (SCROLL_MSG)
   (BUTTON_DOWN_MSG
      {if {== $action kAction_Cancel}
         {ui goto_screen overshell_main_screen}
         {ui pop_screen}
         {set $vismodifierpos 0}
      }
      kDataUnhandled
      )}
{new
   UIScreen
   overshell_visual_screen
   (panels overshell_visual_panel)
   (focus overshell_visual_panel)}
;
#define TRK_MODIFIER_DATA
((
   #ifndef HX_WII os_reset #endif os_hw os_strk os_spotlight os_blnk #ifdef HX_WII os_blnk #endif
))
{new
   MultiSelectListPanel
   overshell_trk_panel
   OVERSHELL_LIST_FILE
   (enter
      {$this lst_reset}
      {title.lbl set text_token {localize os_trk}}
      {$this pause_if_local})
   (exit)
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_wiisux
            {set $wiisux TRUE}
         )
         (os_reset
            {set $gemcustomtexture FALSE}
            {set $gem "none"}
            {set $smashercustomtexture FALSE}
            {set $smasher "none"}
            {set $streakcustomtexture FALSE}
            {set $streak "none"}
            {set $spotlightcustomtexture FALSE}
            {set $highwaycustomtexture FALSE}
            {set $highway "none"}
            {set $spotlight "none"}
            {set $multiringcustomtexture FALSE}
            {set $multiring "none"}
            {set $odbarcustomtexture FALSE}
            {set $odbar "none"}
            {set $scorecustomtexture FALSE}
            {set $scoretex "none"}
            {$this lst_reset}
            INIT_DTA_WRITER
            {ui push_screen reset_info_screen}
         )
         (os_hw
            {ui push_screen overshell_highway_screen}
         )
         (os_strk
            {ui push_screen overshell_streak_screen}
         )
         (os_spotlight
            {ui push_screen overshell_spotlight_screen}
         )
      }
   )
   (lst_reset
      {sel_section.lst set_data TRK_MODIFIER_DATA}
   {if $trkmodifierpos
      {sel_section.lst set_selected $trkmodifierpos}
   })
   (SCROLL_MSG)
   (BUTTON_DOWN_MSG
      {if {== $action kAction_Cancel}
         {ui goto_screen overshell_main_screen}
         {ui pop_screen}
         {set $trkmodifierpos 0}
      }
      kDataUnhandled
      )}
{new
   UIScreen
   overshell_trk_screen
   (panels overshell_trk_panel)
   (focus overshell_trk_panel)}
;
{new
    MultiSelectListPanel
    overshell_highway_panel
    OVERSHELL_LIST_FILE
    (enter
        {sel_section.lst set_data
            (#include track/highway/highway.dta)}
        {title.lbl set text_token {localize os_hw}})
    (exit)
    (SELECT_MSG
      {set $highwaycustomtexture TRUE}
      {set $highway {$component selected_sym}}
      {ui goto_screen overshell_trk_screen}
      {ui pop_screen}
    )
    (update_helpbar
            {helpbar
                set_config
                ((cancel helpbar_back)
                    (confirm helpbar_select))})
    (SCROLL_MSG)
    (BUTTON_DOWN_MSG
        {if
        {== $action kAction_Cancel}
         {ui goto_screen overshell_trk_screen}
         {ui pop_screen}}
         kDataUnhandled)
    (TRANSITION_COMPLETE_MSG
        {$this update_helpbar})}
{new
   UIScreen
   overshell_highway_screen
   (panels overshell_highway_panel)
   (focus overshell_highway_panel)}
;
{new
    MultiSelectListPanel
    overshell_streak_panel
    OVERSHELL_LIST_FILE
    (enter
        {sel_section.lst set_data
            (#include track/streak/streak.dta)}
        {title.lbl set text_token {localize os_strk}})
    (exit)
    (SELECT_MSG
      {set $streakcustomtexture TRUE}
      {set $streak {$component selected_sym}}
      {ui goto_screen overshell_trk_screen}
      {ui pop_screen}
    )
    (update_helpbar
            {helpbar
                set_config
                ((cancel helpbar_back)
                    (confirm helpbar_select))})
    (SCROLL_MSG)
    (BUTTON_DOWN_MSG
        {if
        {== $action kAction_Cancel}
         {ui goto_screen overshell_trk_screen}
         {ui pop_screen}}
         kDataUnhandled)
    (TRANSITION_COMPLETE_MSG
        {$this update_helpbar})}
{new
   UIScreen
   overshell_streak_screen
   (panels overshell_streak_panel)
   (focus overshell_streak_panel)}
;
{new
    MultiSelectListPanel
    overshell_spotlight_panel
    OVERSHELL_LIST_FILE
    (enter
        {sel_section.lst set_data
            (#include track/spotlight/spotlight.dta)}
        {title.lbl set text_token {localize os_spotlight}})
    (exit)
    (SELECT_MSG
      {set $spotlightcustomtexture TRUE}
      {set $spotlight {$component selected_sym}}
      {ui goto_screen overshell_trk_screen}
      {ui pop_screen}
    )
    (update_helpbar
            {helpbar
                set_config
                ((cancel helpbar_back)
                    (confirm helpbar_select))})
    (SCROLL_MSG)
    (BUTTON_DOWN_MSG
        {if
        {== $action kAction_Cancel}
         {ui goto_screen overshell_trk_screen}
         {ui pop_screen}}
         kDataUnhandled)
    (TRANSITION_COMPLETE_MSG
        {$this update_helpbar})}
{new
   UIScreen
   overshell_spotlight_screen
   (panels overshell_spotlight_panel)
   (focus overshell_spotlight_panel)}
;
{new
   UIPanel
   options_milo_panel
   (file
      "options/options_audio.milo")
   (focus background_music.btn)
   (load
      {content_mgr start_refresh}
      {content_loading_panel allowed_to_show TRUE})
   (finish_load
      {content_loading_panel allowed_to_show FALSE})
   (is_loaded
      {content_mgr refresh_done})
   (enter
	  {background.sld set_num_steps 41} ;number of steps for note speed slider
      {crowd.sld set_num_steps 31} ;number of steps for song speed slider
      {sfx.sld set_num_steps 60} ;number of steps for venue fps slider
	  {background.sld set_current {int {+ 0.5 {/ {+ {- $trackspeed 1} 0.5} 0.05}}}} ;set note speed slider based on current value
      {crowd.sld set_current {int {+ 0.5 {/ {- $speedmod 1} 0.05}}}} ;set song speed slider based on current value
      #ifdef HX_WII
      {$this disable sfx.sld}
      {sfx.sld set_showing FALSE}
      #else
      {sfx.sld set_current {int {- $emulatefps 1}}} ;set FPS slider based on current value
      #endif
	  {background_music.btn set text_token {sprintf {localize trackspeed_msg} {int {+ 0.5 {* $trackspeed 100}}}}} ;set note speed msg
	  {crowd.btn set text_token {sprintf {localize speed_msg} {int {+ 0.5 {* $speedmod 100}}}}} ;set song speed msg
      #ifdef HX_WII
      {$this disable sfx.btn}
      {sfx.btn set_showing FALSE}
      #else
	  {sfx.btn set text_token {sprintf {localize fps_msg} {int $emulatefps}}}  ;set venue fps msg
      #endif
      {audio_options.lbl set text_token milosliderlbl}
      {karaoke.btn set_showing FALSE}
      {$this disable karaoke.btn}
	  {$this update_all_from_profile}
      {memcardmgr
         add_sink
         $this
         (save_load_all_complete_msg)})
   (exit
      {memcardmgr remove_sink $this save_load_all_complete_msg})
   (save_load_all_complete_msg
      {$this update_all_from_profile})
   (TRANSITION_COMPLETE_MSG
      {$this
         update_helpbar
         {$this focus_name}}
      kDataUnhandled)
   (FOCUS_MSG
      {$this update_helpbar $new_focus})
   (SCROLL_SELECT_MSG
      {$this on_slider_change $component})
   (SCROLL_MSG
      {$this on_slider_change $component})
   (SELECT_MSG
      {switch
         $component
         (background_music.btn
            {background.sld store}
            {$this set_focus background.sld})
         (crowd.btn
            {crowd.sld store}
            {$this set_focus crowd.sld})
         (sfx.btn
            {sfx.sld store}
            {$this set_focus sfx.sld})})
   (BUTTON_DOWN_MSG
      {switch
         {$this focus_name}
         (background.sld
            {switch
               $action
               (kAction_Confirm
                  {background.sld confirm}
                  {play_instr_sfx $user button_select}
                  {$this set_focus background_music.btn})
               (kAction_Cancel
                  {background.sld undo $user}
                  {$this set_focus background_music.btn})
               kDataUnhandled})
         (crowd.sld
            {switch
               $action
               (kAction_Confirm
                  {crowd.sld confirm}
                  {play_instr_sfx $user button_select}
                  {$this set_focus crowd.btn})
               (kAction_Cancel
                  {crowd.sld undo $user}
                  {$this set_focus crowd.btn})
               kDataUnhandled})
         (sfx.sld
            {switch
               $action
               (kAction_Confirm
                  {sfx.sld confirm}
                  {play_instr_sfx $user button_select}
                  {$this set_focus sfx.btn})
               (kAction_Cancel
                  {sfx.sld undo $user}
                  {$this set_focus sfx.btn})
               kDataUnhandled})
         {if_else {== $action kAction_Cancel}
			{ui pop_screen}
			kDataUnhandled}})
   (on_slider_change
      ($component)
      {switch
         $component
         (background.sld
            {do {set $component current}}
            {$this set_speeds})
         (crowd.sld
            {do {set $component current}}
            {$this set_speeds})
         (sfx.sld
            {do {set $component current}}
            {$this set_speeds})})
   (update_all_from_profile
      {$this
         iterate
         UISlider
         $s
         {$this update_from_profile $s}})
   (update_from_profile
      ($component)
      {switch
         $component
         (background.sld
            {$component
               set_current
               {int {+ 0.5 {/ {+ {- $trackspeed 1} 0.5} 0.05}}}})
         (crowd.sld
            {$component
               set_current
               {int {+ 0.5 {/ {- $speedmod 1} 0.05}}}})
         (sfx.sld
            {$component
               set_current
               {int {- $emulatefps 1}}})})
	(set_speeds
         {do
            {set $trackspeed {- {+ 1 {* {background.sld current} 0.05}} 0.5}}
            {set $speedmod
               {+ 1 {* {crowd.sld current} 0.05}}}
            {set $emulatefps
               {+ 1 {sfx.sld current}}}
         {set $leaderspeed $speedmod}}
         {set $leaderspeed $speedmod}
         {$this display_trackspeed_msg $trackspeed}
         {$this display_speed_msg $speedmod}
         {$this display_fps_msg $emulatefps})
   (display_trackspeed_msg
      ($tspd)
      {background_music.btn set text_token {sprintf {localize trackspeed_msg} {int {+ 0.5 {* $tspd 100}}}}})
   (display_speed_msg
      ($mspd)
     {crowd.btn set text_token {sprintf {localize speed_msg} {int {+ 0.5 {* $mspd 100}}}}})
   (display_fps_msg
      ($fps)
     {sfx.btn set text_token {sprintf {localize fps_msg} {int $fps}}}) ;don't add 1 here because this is being fed the actual fps
   (update_helpbar
      ($new_focus)
      {switch
         $new_focus
         ((background_music.btn crowd.btn sfx.btn voicechat.btn)
            {helpbar
               set_config
               ((cancel helpbar_back)
                  (confirm helpbar_changesetting))})
         ((background.sld crowd.sld sfx.sld voicechat.sld)
            {helpbar
               set_config
               ((cancel helpbar_cancel)
                  (confirm helpbar_confirmsetting))})})}
{new
   UIScreen
   options_milo_screen
   (panels meta background_panel main_popup_bg_panel options_milo_panel)
   (focus options_milo_panel)
   (back overshell_main_screen)
   (helpbar
      (helpbar_back helpbar_select))}
